// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è frontend –ª–æ–≥–∏–∫–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockStoryData = [
  {
    story_id: 'story1',
    user_id: 'user1',
    created_at: '2024-01-01T12:00:00Z',
    question: '–ö–∞–∫–æ–π –≤–∞—à –ª—é–±–∏–º—ã–π —Ü–≤–µ—Ç?'
  },
  {
    story_id: 'story2',
    user_id: 'user2',
    created_at: '2024-01-02T14:00:00Z',
    question: '–ß—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ –Ω–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ?'
  }
];

const mockAnswerData = [
  {
    story_id: 'story1',
    username: 'user1',
    answer: '–°–∏–Ω–∏–π',
    extracted_at: '2024-01-01T12:30:00Z',
    created_at: '2024-01-01T12:30:00Z'
  },
  {
    story_id: 'story1',
    username: 'user2',
    answer: '–ö—Ä–∞—Å–Ω—ã–π',
    extracted_at: '2024-01-01T12:35:00Z',
    created_at: '2024-01-01T12:35:00Z'
  },
  {
    story_id: 'story1',
    username: 'user3',
    answer: '–°–∏–Ω–∏–π',
    extracted_at: '2024-01-01T12:40:00Z',
    created_at: '2024-01-01T12:40:00Z'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ stories –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
function filterStories(stories, searchTerm) {
  if (!searchTerm) return stories;
  
  const lowerSearchTerm = searchTerm.toLowerCase();
  return stories.filter(story => 
    story.story_id.toLowerCase().includes(lowerSearchTerm) ||
    (story.question && story.question.toLowerCase().includes(lowerSearchTerm))
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ stories
function sortStories(stories, sortKey, direction = 'asc') {
  return [...stories].sort((a, b) => {
    let aValue = a[sortKey];
    let bValue = b[sortKey];
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
    if (sortKey === 'created_at') {
      aValue = new Date(aValue);
      bValue = new Date(bValue);
    }
    
    if (direction === 'asc') {
      return aValue > bValue ? 1 : -1;
    } else {
      return aValue < bValue ? 1 : -1;
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
function generateColorMap(answers) {
  const uniqueAnswers = [...new Set(answers.map(a => a.answer.toLowerCase().trim()))];
  const colors = [
    'bg-blue-100 text-blue-800',
    'bg-green-100 text-green-800', 
    'bg-yellow-100 text-yellow-800',
    'bg-purple-100 text-purple-800',
    'bg-pink-100 text-pink-800'
  ];
  
  const colorMap = new Map();
  uniqueAnswers.forEach((answer, index) => {
    colorMap.set(answer, colors[index % colors.length]);
  });
  
  return colorMap;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
function prepareChartData(answers) {
  const distribution = {};
  
  answers.forEach(answer => {
    const normalizedAnswer = answer.answer.toLowerCase().trim();
    distribution[normalizedAnswer] = (distribution[normalizedAnswer] || 0) + 1;
  });
  
  return Object.entries(distribution).map(([answer, count], index) => ({
    name: answer.length > 20 ? answer.substring(0, 20) + '...' : answer,
    value: count,
    percentage: Math.round((count / answers.length) * 100),
    color: `hsl(${index * 60}, 70%, 50%)`
  }));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(dateString) {
  try {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  } catch {
    return dateString;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è API –æ—Ç–≤–µ—Ç–∞
function validateApiResponse(response, expectedStructure) {
  if (!response || typeof response !== 'object') {
    return false;
  }
  
  for (const key of expectedStructure) {
    if (!(key in response)) {
      return false;
    }
  }
  
  return true;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
function buildUrlWithParams(baseUrl, params) {
  const url = new URL(baseUrl, 'http://localhost'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –∫–∞–∫ base –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  
  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null) {
      url.searchParams.append(key, value.toString());
    }
  });
  
  return url.pathname + url.search;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
function runFrontendTests() {
  console.log('üé® –ó–∞–ø—É—Å–∫ frontend —Ç–µ—Å—Ç–æ–≤...\n');
  
  let passed = 0;
  let failed = 0;
  
  function test(name, testFunction) {
    try {
      testFunction();
      console.log(`‚úÖ ${name}`);
      passed++;
    } catch (error) {
      console.log(`‚ùå ${name}: ${error.message}`);
      failed++;
    }
  }
  
  function assertEqual(actual, expected, message) {
    if (JSON.stringify(actual) !== JSON.stringify(expected)) {
      throw new Error(`${message || 'Assertion failed'}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);
    }
  }
  
  function assertTrue(condition, message) {
    if (!condition) {
      throw new Error(message || 'Assertion failed: expected true');
    }
  }
  
  // –¢–µ—Å—Ç 1: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è stories
  test('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è stories –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É', () => {
    const result1 = filterStories(mockStoryData, 'story1');
    const result2 = filterStories(mockStoryData, '—Ü–≤–µ—Ç');
    
    assertEqual(result1.length, 1, '–î–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å 1 story –ø–æ ID');
    assertEqual(result1[0].story_id, 'story1', '–î–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è story');
    assertEqual(result2.length, 1, '–î–æ–ª–∂–Ω–∞ –Ω–∞–π—Ç–∏—Å—å 1 story –ø–æ –≤–æ–ø—Ä–æ—Å—É');
  });
  
  // –¢–µ—Å—Ç 2: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ stories
  test('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ stories', () => {
    const sortedAsc = sortStories(mockStoryData, 'story_id', 'asc');
    const sortedDesc = sortStories(mockStoryData, 'story_id', 'desc');
    
    assertEqual(sortedAsc[0].story_id, 'story1', '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é');
    assertEqual(sortedDesc[0].story_id, 'story2', '–ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –ø–æ —É–±—ã–≤–∞–Ω–∏—é');
  });
  
  // –¢–µ—Å—Ç 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã
  test('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤', () => {
    const colorMap = generateColorMap(mockAnswerData);
    
    assertTrue(colorMap.has('—Å–∏–Ω–∏–π'), '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "—Å–∏–Ω–∏–π"');
    assertTrue(colorMap.has('–∫—Ä–∞—Å–Ω—ã–π'), '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–≤–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ "–∫—Ä–∞—Å–Ω—ã–π"');
    assertEqual(colorMap.size, 2, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–∞');
  });
  
  // –¢–µ—Å—Ç 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
  test('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤', () => {
    const chartData = prepareChartData(mockAnswerData);
    
    assertEqual(chartData.length, 2, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞');
    assertEqual(chartData[0].value, 2, '–°–∏–Ω–∏–π –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è 2 —Ä–∞–∑–∞');
    assertEqual(chartData[1].value, 1, '–ö—Ä–∞—Å–Ω—ã–π –¥–æ–ª–∂–µ–Ω –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è 1 —Ä–∞–∑');
    assertEqual(chartData[0].percentage, 67, '–°–∏–Ω–∏–π –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å 67%');
  });
  
  // –¢–µ—Å—Ç 5: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  test('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã', () => {
    const formatted = formatDate('2024-01-01T12:00:00Z');
    
    assertTrue(formatted.includes('2024'), '–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≥–æ–¥');
    assertTrue(formatted.includes('1') || formatted.includes('01'), '–î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–µ–Ω—å');
  });
  
  // –¢–µ—Å—Ç 6: –í–∞–ª–∏–¥–∞—Ü–∏—è API –æ—Ç–≤–µ—Ç–∞
  test('–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API –æ—Ç–≤–µ—Ç–∞', () => {
    const validResponse = { stories: [], total: 0, hasMore: false };
    const invalidResponse = { stories: [] }; // –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç total
    
    assertTrue(
      validateApiResponse(validResponse, ['stories', 'total', 'hasMore']),
      '–í–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É'
    );
    assertTrue(
      !validateApiResponse(invalidResponse, ['stories', 'total', 'hasMore']),
      '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É'
    );
  });
  
  // –¢–µ—Å—Ç 7: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  test('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏', () => {
    const url = buildUrlWithParams('/api/stories', {
      dateFrom: '2024-01-01',
      minAnswers: 5,
      search: 'test'
    });
    
    assertTrue(url.includes('dateFrom=2024-01-01'), 'URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å dateFrom');
    assertTrue(url.includes('minAnswers=5'), 'URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å minAnswers');
    assertTrue(url.includes('search=test'), 'URL –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å search');
  });
  
  // –¢–µ—Å—Ç 8: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    const emptyFilter = filterStories([], 'test');
    const emptyChart = prepareChartData([]);
    const emptyColorMap = generateColorMap([]);
    
    assertEqual(emptyFilter.length, 0, '–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –ø—É—Å—Ç—ã–º');
    assertEqual(emptyChart.length, 0, '–ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞');
    assertEqual(emptyColorMap.size, 0, '–ü—É—Å—Ç–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞');
  });
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã frontend —Ç–µ—Å—Ç–æ–≤:`);
  console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ –í—Å–µ frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
const success = runFrontendTests();
if (typeof process !== 'undefined' && typeof process.exit === 'function') {
  process.exit(success ? 0 : 1);
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
if (typeof module !== 'undefined') {
  module.exports = {
    filterStories,
    sortStories,
    generateColorMap,
    prepareChartData,
    formatDate,
    validateApiResponse,
    buildUrlWithParams,
    runFrontendTests
  };
} 