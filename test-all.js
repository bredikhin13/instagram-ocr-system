#!/usr/bin/env node

/**
 * üß™ –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Instagram OCR System
 * 
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã: Lambda backend + React frontend
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Instagram OCR System - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
console.log('=' * 60);
console.log('üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:', new Date().toLocaleString('ru-RU'));
console.log('');

let allTestsPassed = true;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
function runCommand(command, workDir = '.') {
  return new Promise((resolve, reject) => {
    console.log(`üîß –í—ã–ø–æ–ª–Ω—è—é: ${command} (–≤ ${workDir})`);
    
    exec(command, { cwd: workDir }, (error, stdout, stderr) => {
      if (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        resolve({ success: false, error: error.message, stdout, stderr });
      } else {
        console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        resolve({ success: true, stdout, stderr });
      }
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
function checkFile(filePath) {
  const exists = fs.existsSync(filePath);
  console.log(`üìÅ ${filePath}: ${exists ? '‚úÖ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
  return exists;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('\nüîç 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–†–û–ï–ö–¢–ê');
  console.log('-'.repeat(40));
  
  const requiredFiles = [
    'lambda/tests/simple.test.js',
    'frontend/src/test/simple-frontend.test.js',
    'lambda/src/modules/s3Reader.ts',
    'lambda/src/modules/ocr.ts',
    'lambda/src/modules/parser.ts',
    'lambda/src/modules/dynamoWriter.ts',
    'lambda/src/modules/statistics.ts',
    'lambda/src/lambda.ts',
    'frontend/src/App.tsx',
    'infrastructure/main.tf',
    'README.md'
  ];
  
  let missingFiles = 0;
  for (const file of requiredFiles) {
    if (!checkFile(file)) {
      missingFiles++;
    }
  }
  
  if (missingFiles > 0) {
    console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${missingFiles} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤`);
    allTestsPassed = false;
  } else {
    console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ');
  }
  
  console.log('\nüß™ 2. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LAMBDA BACKEND');
  console.log('-'.repeat(40));
  
  try {
    const lambdaResult = await runCommand('node tests/simple.test.js', 'lambda');
    if (!lambdaResult.success) {
      console.log('‚ùå Lambda —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
      allTestsPassed = false;
    } else {
      console.log('‚úÖ Lambda —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
      console.log(lambdaResult.stdout);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Lambda —Ç–µ—Å—Ç–æ–≤:', error.message);
    allTestsPassed = false;
  }
  
  console.log('\nüé® 3. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REACT FRONTEND');
  console.log('-'.repeat(40));
  
  try {
    const frontendResult = await runCommand('node src/test/simple-frontend.test.js', 'frontend');
    if (!frontendResult.success) {
      console.log('‚ùå Frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
      allTestsPassed = false;
    } else {
      console.log('‚úÖ Frontend —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
      console.log(frontendResult.stdout);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Frontend —Ç–µ—Å—Ç–æ–≤:', error.message);
    allTestsPassed = false;
  }
  
  console.log('\nüèóÔ∏è 4. –ü–†–û–í–ï–†–ö–ê TERRAFORM –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò');
  console.log('-'.repeat(40));
  
  try {
    const terraformResult = await runCommand('terraform validate', 'infrastructure');
    if (!terraformResult.success) {
      console.log('‚ö†Ô∏è  Terraform –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)');
      console.log(terraformResult.stderr);
    } else {
      console.log('‚úÖ Terraform –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Terraform –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
  }
  
  console.log('\nüìä 5. –ü–û–ö–†–´–¢–ò–ï –¢–ï–°–¢–ê–ú–ò');
  console.log('-'.repeat(40));
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ–∫—Ä—ã—Ç–∏—è
  const lambdaModules = [
    'lambda/src/modules/s3Reader.ts',
    'lambda/src/modules/ocr.ts', 
    'lambda/src/modules/parser.ts',
    'lambda/src/modules/dynamoWriter.ts',
    'lambda/src/modules/statistics.ts'
  ];
  
  const frontendComponents = [
    'frontend/src/components/StoryTable.tsx',
    'frontend/src/components/AnswerTable.tsx',
    'frontend/src/components/StatisticsView.tsx',
    'frontend/src/services/api.ts'
  ];
  
  console.log('üîß Lambda –º–æ–¥—É–ª–∏:');
  lambdaModules.forEach(module => {
    console.log(`  üìÑ ${path.basename(module)}: ${checkFile(module) ? '‚úÖ' : '‚ùå'}`);
  });
  
  console.log('\nüé® Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
  frontendComponents.forEach(component => {
    console.log(`  üìÑ ${path.basename(component)}: ${checkFile(component) ? '‚úÖ' : '‚ùå'}`);
  });
  
  console.log('\nüéØ 6. –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢');
  console.log('='.repeat(60));
  
  if (allTestsPassed) {
    console.log('üü¢ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! üéâ');
    console.log('');
    console.log('‚úÖ Lambda Backend: –í—Å–µ –º–æ–¥—É–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ React Frontend: –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ');
    console.log('‚úÖ –ö–æ–¥ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!');
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Vision API –∫–ª—é—á');
    console.log('  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd infrastructure && terraform apply');
    console.log('  3. –°–æ–±–µ—Ä–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥: cd frontend && npm run build');
    console.log('  4. –î–µ–ø–ª–æ–π—Ç–µ –≤ S3 –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É!');
    console.log('');
    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ Instagram OCR –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
  } else {
    console.log('üî¥ –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨! ‚ö†Ô∏è');
    console.log('');
    console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤ –≤—ã—à–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π');
    console.log('');
    console.log('üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('  1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã');
    console.log('  2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤');
    console.log('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ');
  }
  
  console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log(`  üß™ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${allTestsPassed ? '–£–°–ü–ï–•' : '–ü–†–û–í–ê–õ'}`);
  console.log(`  üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}`);
  console.log(`  üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–æ–¥—É–ª—å–Ω–∞—è, AWS Serverless`);
  console.log(`  üõ°Ô∏è –ü–æ–∫—Ä—ã—Ç–∏–µ: Backend + Frontend + Infrastructure`);
  
  return allTestsPassed;
}

// –ó–∞–ø—É—Å–∫
runAllTests()
  .then(success => {
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 