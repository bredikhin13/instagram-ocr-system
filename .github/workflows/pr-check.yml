name: 🔍 PR Check - Instagram OCR System

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: 18

jobs:
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd lambda && npm ci || echo "Lambda deps install failed"
          cd ../frontend && npm ci || echo "Frontend deps install failed"

      - name: 🧹 Lint Lambda code
        run: |
          cd lambda
          npm run lint || echo "Lambda lint check completed with warnings"

      - name: 🧪 Run Lambda tests
        run: npm run test:lambda

      - name: 🧪 Run Frontend tests
        run: npm run test:frontend

      - name: 📊 Run integration tests
        run: npm test

  build-check:
    name: 🏗️ Build Check
    runs-on: ubuntu-latest
    needs: lint-and-test
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: |
          npm ci
          cd lambda && npm ci || echo "Lambda deps install failed"
          cd ../frontend && npm ci || echo "Frontend deps install failed"

      - name: 🔨 Test Lambda build
        run: |
          cd lambda
          npm run build || echo "Lambda build failed"

      - name: 🎨 Test Frontend build
        run: |
          cd frontend
          npm run build || echo "Frontend build failed"

  terraform-check:
    name: 🏗️ Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: 🔍 Terraform Format Check
        run: |
          cd infrastructure
          terraform fmt -check

      - name: ✅ Terraform Validate
        run: |
          cd infrastructure
          terraform init -backend=false
          terraform validate

  security-check:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔒 Run npm audit
        run: |
          cd lambda && npm audit --audit-level=high || echo "Lambda audit completed with warnings"
          cd ../frontend && npm audit --audit-level=high || echo "Frontend audit completed with warnings"

      - name: 🔍 Check for sensitive files
        run: |
          if find . -name "*.key" -o -name "*.pem" -o -name "*secret*" -o -name ".env" | grep -q .; then
            echo "❌ Sensitive files found!"
            find . -name "*.key" -o -name "*.pem" -o -name "*secret*" -o -name ".env"
            exit 1
          else
            echo "✅ No sensitive files found"
          fi

  pr-summary:
    name: 📋 PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-check, terraform-check, security-check]
    if: always()
    steps:
      - name: 📊 Create PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'lint-and-test': '${{ needs.lint-and-test.result }}',
              'build-check': '${{ needs.build-check.result }}',
              'terraform-check': '${{ needs.terraform-check.result }}',
              'security-check': '${{ needs.security-check.result }}'
            };
            
            let summary = '## 📋 PR Check Results\n\n';
            let allPassed = true;
            
            for (const [job, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : '❌';
              summary += `${emoji} **${job}**: ${result}\n`;
              if (result !== 'success') allPassed = false;
            }
            
            summary += '\n';
            if (allPassed) {
              summary += '🎉 **All checks passed!** This PR is ready for review and merge.\n\n';
              summary += '### Next Steps:\n';
              summary += '- ✅ Code review\n';
              summary += '- ✅ Merge to main\n';
              summary += '- 🚀 Automatic deployment will start\n';
            } else {
              summary += '⚠️ **Some checks failed.** Please review and fix the issues before merging.\n';
            }
            
            // Add summary as PR comment
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }
            
            console.log(summary); 