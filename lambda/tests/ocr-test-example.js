#!/usr/bin/env node
/**
 * –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Vision API —Å JSON credentials
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GOOGLE_VISION_API_KEY (JSON –∏–ª–∏ API Key)
 * 2. node tests/ocr-test-example.js
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å .env —Ñ–∞–π–ª)
try {
  require('dotenv').config();
} catch (e) {
  // dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
}

const { ImageAnnotatorClient } = require('@google-cloud/vision');

async function testGoogleVisionAPI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Vision API...');
  
  const apiKey = process.env.GOOGLE_VISION_API_KEY;
  
  if (!apiKey) {
    console.error('‚ùå –û—à–∏–±–∫–∞: GOOGLE_VISION_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    console.log('üìã –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
    console.log('   export GOOGLE_VISION_API_KEY=\'{"type":"service_account",...}\'');
    console.log('   –∏–ª–∏');
    console.log('   export GOOGLE_VISION_API_KEY=AIzaSy...');
    process.exit(1);
  }

  let visionClient;

  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON (Service Account)
    const credentials = JSON.parse(apiKey);
    
    console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω Service Account JSON');
    console.log(`üìã Project ID: ${credentials.project_id}`);
    console.log(`üìã Client Email: ${credentials.client_email}`);
    
    visionClient = new ImageAnnotatorClient({
      credentials,
      projectId: credentials.project_id
    });
    
  } catch (parseError) {
    // –ï—Å–ª–∏ –Ω–µ JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ API Key
    console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω API Key');
    console.log(`üìã Key: ${apiKey.substring(0, 10)}...`);
    
    visionClient = new ImageAnnotatorClient({
      apiKey: apiKey.trim()
    });
  }

  try {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
    const testImageBase64 = createTestImage();
    
    console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Vision API...');
    
    const [result] = await visionClient.textDetection({
      image: {
        content: testImageBase64
      }
    });

    const detections = result.textAnnotations;
    
    if (detections && detections.length > 0) {
      console.log('‚úÖ Google Vision API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      console.log(`üìã –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç: "${detections[0].description}"`);
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–∫—Ü–∏–π: ${detections.length}`);
    } else {
      console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, –Ω–æ —Ç–µ–∫—Å—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
      console.log('üìã –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }
    
    console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Vision API:');
    console.error(error.message);
    
    if (error.message.includes('API key not valid')) {
      console.log('üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
    } else if (error.message.includes('Cloud Vision API has not been used')) {
      console.log('üí° –†–µ—à–µ–Ω–∏–µ: –í–∫–ª—é—á–∏—Ç–µ Cloud Vision API –≤ Google Cloud Console');
    } else if (error.message.includes('permission')) {
      console.log('üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ Service Account');
    }
    
    process.exit(1);
  }
}

function createTestImage() {
  // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 (1x1 –±–µ–ª—ã–π –ø–∏–∫—Å–µ–ª—å)
  // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º Instagram Stories
  return 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==';
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testGoogleVisionAPI()
    .then(() => {
      console.log('');
      console.log('üöÄ –ì–æ—Ç–æ–≤–æ! Google Vision API –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
      console.log('üìã –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã: npm test');
    })
    .catch(error => {
      console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
} 