// –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ username –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractUsernameFromText(text) {
  const patterns = [
    /@(\w+)\s+(?:–æ—Ç–≤–µ—Ç–∏–ª|answered|says?)\s*[":]\s*(.+?)(?=\n|@|$)/gi,
    /(\w+):\s*(.+?)(?=\n|$)/gm,
    /@(\w+)\s*[-‚Äì]\s*(.+?)(?=\n|@|$)/gi
  ];
  
  const results = [];
  
  for (const pattern of patterns) {
    let match;
    while ((match = pattern.exec(text)) !== null) {
      const username = match[1].trim();
      const answer = match[2]?.trim();
      
      if (username && answer && username.length > 1 && username.length < 30) {
        // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∫–∞–≤—ã—á–µ–∫
        const cleanAnswer = answer.replace(/^["\'"¬´¬ª]/g, '').replace(/["\'"¬´¬ª]$/g, '');
        results.push({ username, answer: cleanAnswer });
      }
    }
  }
  
  return results;
}

// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
function normalizeAnswer(answer) {
  return answer
    .replace(/^["\'"¬´¬ª]/g, '') // —É–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
    .replace(/["\'"¬´¬ª]$/g, '') // —É–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
    .replace(/[.,!?;:]/g, '') // —É–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    .replace(/\s+/g, ' ') // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
    .trim()
    .toLowerCase();
}

// –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function calculateAnswerDistribution(answers) {
  const distribution = {};
  
  for (const answer of answers) {
    const normalized = normalizeAnswer(answer.answer);
    distribution[normalized] = (distribution[normalized] || 0) + 1;
  }
  
  return distribution;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ—Å—Ç–æ–≤...\n');
  
  let passed = 0;
  let failed = 0;
  
  function test(name, testFunction) {
    try {
      testFunction();
      console.log(`‚úÖ ${name}`);
      passed++;
    } catch (error) {
      console.log(`‚ùå ${name}: ${error.message}`);
      failed++;
    }
  }
  
  function assertEqual(actual, expected, message) {
    if (JSON.stringify(actual) !== JSON.stringify(expected)) {
      throw new Error(`${message || 'Assertion failed'}: expected ${JSON.stringify(expected)}, got ${JSON.stringify(actual)}`);
    }
  }
  
  // –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ username –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  test('–ü–∞—Ä—Å–∏–Ω–≥ username –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞', () => {
    const text = '@john –æ—Ç–≤–µ—Ç–∏–ª "–°–∏–Ω–∏–π"\n@mary: –ö—Ä–∞—Å–Ω—ã–π';
    const result = extractUsernameFromText(text);
    
    assertEqual(result.length, 2, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–æ 2 –æ—Ç–≤–µ—Ç–∞');
    assertEqual(result[0].username, 'john', '–ü–µ—Ä–≤—ã–π username –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å john');
    assertEqual(result[0].answer, '–°–∏–Ω–∏–π', '–ü–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–∏–Ω–∏–π');
  });
  
  // –¢–µ—Å—Ç 2: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  test('–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤', () => {
    const answer1 = normalizeAnswer('"–¢–µ—Å—Ç!"');
    const answer2 = normalizeAnswer('  –¢–ï–°–¢  ');
    
    assertEqual(answer1, '—Ç–µ—Å—Ç', '–î–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è –∫–∞–≤—ã—á–∫–∏ –∏ –∑–Ω–∞–∫–∏');
    assertEqual(answer2, '—Ç–µ—Å—Ç', '–î–æ–ª–∂–Ω—ã —É–±–∏—Ä–∞—Ç—å—Å—è –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç—å—Å—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É');
  });
  
  // –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
  test('–ü–æ–¥—Å—á–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤', () => {
    const answers = [
      { username: 'user1', answer: '–°–∏–Ω–∏–π' },
      { username: 'user2', answer: '—Å–∏–Ω–∏–π!' },
      { username: 'user3', answer: '–ö—Ä–∞—Å–Ω—ã–π' }
    ];
    
    const distribution = calculateAnswerDistribution(answers);
    
    assertEqual(distribution['—Å–∏–Ω–∏–π'], 2, '–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Å–∏–Ω–∏—Ö –æ—Ç–≤–µ—Ç–∞');
    assertEqual(distribution['–∫—Ä–∞—Å–Ω—ã–π'], 1, '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∫—Ä–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç');
  });
  
  // –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö', () => {
    const emptyText = extractUsernameFromText('');
    const emptyDistribution = calculateAnswerDistribution([]);
    
    assertEqual(emptyText.length, 0, '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    assertEqual(Object.keys(emptyDistribution).length, 0, '–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –¥–∞–≤–∞—Ç—å –ø—É—Å—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ');
  });
  
  // –¢–µ—Å—Ç 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö username
  test('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö username', () => {
    const text = '@a –æ—Ç–≤–µ—Ç–∏–ª "—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"\n@validuser –æ—Ç–≤–µ—Ç–∏–ª "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç"';
    const result = extractUsernameFromText(text);
    
    assertEqual(result.length, 1, '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–æ—Ä–æ—Ç–∫–∏–π username');
    assertEqual(result[0].username, 'validuser', '–î–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π username');
  });
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`);
  console.log(`‚úÖ –ü—Ä–æ—à–ª–æ: ${passed}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${Math.round((passed / (passed + failed)) * 100)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return true;
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    return false;
  }
}

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const success = runTests();
  process.exit(success ? 0 : 1);
}

module.exports = {
  extractUsernameFromText,
  normalizeAnswer,
  calculateAnswerDistribution,
  runTests
}; 